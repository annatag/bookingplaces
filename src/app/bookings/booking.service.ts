import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { AuthService } from '../auth/auth.service';
import { Booking } from './booking.model';
import { delay, map, switchMap, take, tap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';

interface BookingData {
bookedFrom: string;
bookedTo: string;
firstName: string;
guestNumber: number;
lastName: string;
placeId: string;
placeImage: string;
placeTitle: string;
userId: string;

}

@Injectable({
  providedIn: 'root',
})
export class BookingService {
  private _bookings = new BehaviorSubject<Booking[]>([]);

  get bookings() {
    return this._bookings.asObservable();
  }

  constructor(private authService: AuthService, private http: HttpClient) {}

  addBooking(
    placeId: string,
    placeTitle: string,
    placeImage: string,
    firstName: string,
    lastName: string,
    guestNumber: number,
    dateFrom: Date,
    dateTo: Date
  ) {
    let generatedId: string;
    const newBooking = new Booking(
      Math.random().toString(),
      placeId,
      this.authService.userId,
      placeTitle,
      placeImage,
      firstName,
      lastName,
      guestNumber,
      dateFrom,
      dateTo
    );
    // tslint:disable-next-line: max-line-length
    return this.http.post<{databaseId: string}>('https://bookingag-4ced5.firebaseio.com/bookings.json', {...newBooking, id: null}  // I copy the newBooking in the post with overwriting the id to null because it is expected to have an id
    ).pipe(switchMap(resData => {
      generatedId = resData.databaseId;
      return this.bookings;
    }),
    take(1),
    tap(bookings => {
      newBooking.id = generatedId;
      this._bookings.next(bookings.concat(newBooking));
    }

    )); // switchMap allows us to get the response Data which includes our generated by the database id, which I will store
  }

  //cancel is working only in memory here
  // cancelBooking(bookingId: string) {
  //   return this.bookings.pipe(
  //     take(1),
  //     delay(1000),
  //     tap(bookings => {
  //       this._bookings.next(bookings.filter(b => b.id !== bookingId)); // it filters out the booking with bookingId
  //     })
  //     );
  // }

  cancelBooking(bookingId: string) {
      return this.http.delete(`https://bookingag-4ced5.firebaseio.com/bookings/${bookingId}.json`).pipe(
        switchMap(() => {
          return this.bookings;   //this gives me the list of bookings locally not on the server, to update the list loacally too
        }),
        take(1) ,
        tap(bookings => {
          this._bookings.next(bookings.filter(b => b.id !== bookingId)); // it filters out the booking with bookingId
        })
      );
    }

  fetchBookings(){
    return this.http.get<{[key: string]: BookingData}>(`https://bookingag-4ced5.firebaseio.com/bookings.json?orderBy="userId"&equalTo="${this.authService.userId}"`)
    .pipe(
      map(bookingData => {
         const bookings = [];
         for (const key in bookingData) {
           if (bookingData.hasOwnProperty(key)) {
               bookings.push(
               new Booking(
                 key,
                 bookingData[key].placeId,
                 bookingData[key].userId,
                 bookingData[key].placeTitle,
                 bookingData[key].placeImage ,
                 bookingData[key].firstName,
                 bookingData[key].lastName,
                 bookingData[key].guestNumber,
                 new Date(bookingData[key].bookedFrom),
                 new Date(bookingData[key].bookedTo)
                 )
              );
           }
          }
         return bookings;
         }),
          tap(bookings => {
           this._bookings.next(bookings);
         })
         );

  }
}
